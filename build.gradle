/*
 *    Copyright 2018 Duncan Sterken
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

//to build everything:             "gradlew build"
//to build and upload everything:  "gradlew bintrayUpload"

import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'com.jfrog.bintray' version '1.8.4'
    id 'java-library'
    id 'idea'
    id 'maven-publish'
}

group = 'me.duncte123'
archivesBaseName = 'weebJava'
version = "2.1.1_${getBuildNumber()}"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    api group: 'org.jetbrains', name: 'annotations', version: '16.0.1'
    compile group: 'com.github.natanbc', name: 'reliqua', version: '2.4'
    compile group: 'org.json', name: 'json', version: '20180813'
    compile group: 'org.apache.commons', name: 'commons-text', version: '1.6'
}

javadoc {
    failOnError = false
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.author()
    options.encoding = 'UTF-8'
    options.addStringOption('-html5')
    exclude('me/duncte123/weebJava/models/impl')
    exclude('me/duncte123/weebJava/models/reputation/impl')
    exclude('me/duncte123/weebJava/models/settings/impl')
    exclude('me/duncte123/weebJava/web')
    exclude('me/duncte123/weebJava/exceptions')
    exclude('me/duncte123/weebJava/helpers')
}

task sourcesForRelease(type: Copy) {
    from('src/main/java') {
        include '**/WeebInfo.java'
        filter(ReplaceTokens, tokens: [
                version: version.toString()
        ])
    }
    
    into 'build/filteredSrc'

    includeEmptyDirs = false
}

task generateJavaSources(type: SourceTask) {
    def javaSources = sourceSets.main.allJava.filter {
        it.name != 'WeebInfo.java'
    }
    source = javaSources + sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

compileJava {
    options.encoding = 'UTF-8'
    source = generateJavaSources.source

    dependsOn generateJavaSources
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    
    from('src/main/java') {
        exclude '**/WeebInfo.java'
    }
    from sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ["BintrayRelease"]
    pkg {
        repo = 'weeb.java'
        name = 'weeb.java'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/duncte123/weeb.java.git'
        publish = true
        version {
            name = project.version
            released = new Date()
        }
    }
}

publishing {
    publications {
        BintrayRelease(MavenPublication) {
            from components.java
            groupId group
            artifactId archivesBaseName
            version version
            artifact javadocJar
            artifact sourcesJar
        }
    }
}

build {
    dependsOn clean
    dependsOn jar
    dependsOn javadocJar
    dependsOn sourcesJar

    jar.mustRunAfter clean
    javadocJar.mustRunAfter jar
    sourcesJar.mustRunAfter javadocJar
}

bintrayUpload {
    dependsOn build

    onlyIf { System.getenv('BINTRAY_USER') != null }
    onlyIf { System.getenv('BINTRAY_KEY') != null }
}

def getBuildNumber() {
    return System.getenv('TRAVIS_BUILD_NUMBER') ?: getGitHash()
}

def getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}